Sorting it out
# Edit all the Mardown cells below with the appropriate information 
# Run all cells, containing your code 
# Save this Jupyter with the outputs of your executed cells
# PS: Save again the notebook with this outcome.
# PSPS: Don't forget to include the dataset in your submission
Team: Jordan Uribe

Course: CISD 43 – BIG DATA (Spring, 2024)

Problem Statement
This project is about email classification. The distinction between diction used in emails, which are consistant with either spam or legit emails

Keywords: Spam, Ham, Legitiment, Filter, Phishing, Spam detection, email filtering

Required packages
Add instructions to install the required packages
!pip install pymongo
Requirement already satisfied: pymongo in c:\users\bruhh\anaconda3.0\lib\site-packages (4.7.2)
Requirement already satisfied: dnspython<3.0.0,>=1.16.0 in c:\users\bruhh\anaconda3.0\lib\site-packages (from pymongo) (2.6.1)
import pandas as pd #for data formating
import numpy as np #for numerical analysis and data formating
import seaborn as sns #data visualization
import matplotlib.pyplot as plt #data visualization
from sklearn.model_selection import train_test_split #Classification
from sklearn.preprocessing import StandardScaler #Classification
from sklearn.neighbors import KNeighborsClassifier #Classification
from sklearn.metrics import classification_report, confusion_matrix #Classification
from sklearn.feature_extraction.text import TfidfVectorizer #converting text into numbers 
​
​
from pymongo import MongoClient
​
Methodology
Explan your big data metodology I intend to analyze the dataset spam.csv, with contains 5000+ labeled emails and with the given data construct real life applications of supervised machine learning.
Contents:

    Data cleaning and preparation (with visualization) 
    Mongo DB implementaion and querying
    K-Nearest Neighbors model

    
Data cleaning and prep
df=pd.read_csv('spam.csv')
df.info()
​
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 5169 entries, 0 to 5168
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype 
---  ------  --------------  ----- 
 0   Class   5169 non-null   object
 1   Text    5169 non-null   object
dtypes: object(2)
memory usage: 80.9+ KB
df
Class	Text
0	ham	Go until jurong point, crazy.. Available only ...
1	ham	Ok lar... Joking wif u oni...
2	spam	Free entry in 2 a wkly comp to win FA Cup fina...
3	ham	U dun say so early hor... U c already then say...
4	ham	Nah I don't think he goes to usf, he lives aro...
...	...	...
5164	spam	This is the 2nd time we have tried 2 contact u...
5165	ham	Will Ì_ b going to esplanade fr home?
5166	ham	Pity, * was in mood for that. So...any other s...
5167	ham	The guy did some bitching but I acted like i'd...
5168	ham	Rofl. Its true to its name
5169 rows × 2 columns

emailclass=df['Class'].map({'spam':0,'ham':1})
emailtext=df['Text']
print(emailclass)
print(emailtext)
​
0       1
1       1
2       0
3       1
4       1
       ..
5164    0
5165    1
5166    1
5167    1
5168    1
Name: Class, Length: 5169, dtype: int64
0       Go until jurong point, crazy.. Available only ...
1                           Ok lar... Joking wif u oni...
2       Free entry in 2 a wkly comp to win FA Cup fina...
3       U dun say so early hor... U c already then say...
4       Nah I don't think he goes to usf, he lives aro...
                              ...                        
5164    This is the 2nd time we have tried 2 contact u...
5165                Will Ì_ b going to esplanade fr home?
5166    Pity, * was in mood for that. So...any other s...
5167    The guy did some bitching but I acted like i'd...
5168                           Rofl. Its true to its name
Name: Text, Length: 5169, dtype: object
emailsdf= pd.concat([emailclass, emailtext], axis=1)
​
emailsdf
​
Class	Text
0	1	Go until jurong point, crazy.. Available only ...
1	1	Ok lar... Joking wif u oni...
2	0	Free entry in 2 a wkly comp to win FA Cup fina...
3	1	U dun say so early hor... U c already then say...
4	1	Nah I don't think he goes to usf, he lives aro...
...	...	...
5164	0	This is the 2nd time we have tried 2 contact u...
5165	1	Will Ì_ b going to esplanade fr home?
5166	1	Pity, * was in mood for that. So...any other s...
5167	1	The guy did some bitching but I acted like i'd...
5168	1	Rofl. Its true to its name
5169 rows × 2 columns

labels = 'spam','ham'
spam=emailsdf['Class'].value_counts().loc[0]
ham=emailsdf['Class'].value_counts().loc[1]
​
​
sizes = [spam,ham]
colors = ['gold','pink']
​
​
explode = (0, 0) 
plt.pie(sizes, explode=explode, labels=labels, colors=colors,autopct='%1.1f%%'
, shadow=True, startangle=140)
plt.axis('equal')
plt.show()
​

Mongo DB implementaion and queries
client= MongoClient('mongodb://localhost:27017/')
db= client['Email_db']
collection=db['Email_collection']
insertthis = emailsdf.to_dict(orient='records')
collection.insert_many(insertthis)
​
emaillist=collection.find()
​
​
for x in emaillist:
    print(x)


{


results= collection.find({"Text": {"$regex": "\$"}}) #regenx is a mongodb operator that performs pattern matching withn strings
for x in results:
    print(x)

​
results= collection.find({"Text": {"$regex": "Sale"}}) #regenx is a mongodb operator that performs pattern matching within strings
for x in results:
    print(x)



results= collection.find({"Text": {"$regex": "Friend"}}) #regenx is a mongodb operator that performs pattern matching within strings
for x in results:
    print(x)

KNN Algorithm
K-Nearest-Neighbros is a classification supervised machine learning algorithm that uses the labels given by the dataset, 'Spam' and 'Ham', and learns to distinguish between real emails and spam emails. It uses training data which is labled and processes the its features, to which it compares and makes predictions to weither or not the email is spam or ham.

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
​
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['Text'])
y = df['Class']
​
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=42)
​
k = 5
knn_model = KNeighborsClassifier(n_neighbors=k)
knn_model.fit(X_train, y_train)  
​
y_pred = knn_model.predict(X_test)
print(classification_report(y_test, y_pred))
​
              precision    recall  f1-score   support

         ham       0.90      1.00      0.94       889
        spam       1.00      0.28      0.44       145

    accuracy                           0.90      1034
   macro avg       0.95      0.64      0.69      1034
weighted avg       0.91      0.90      0.87      1034

Summary and Conclusion :
to summarize the implementation of K Nearest Neighbors I would first start by "vectorizing" the text into
numeric, binary like values. Doing that would allow the algorithm to diges the contents of the email its its own natural language, resulting in fast processing, especially in this very large data set. After this process, the implementation of KNN is as expected.

As for the results of the test, KNN has displayed competence in classifying ham and spam mail.

Percision: For ham, 90% of the predicited ham emails were percise while 100% of the predicted spam emails were correct.

Recall: For ham emails, 100% of the of the ham emails were classified, as for the Spam mails, only 28% of the emails were classified

Why only 23% and does this show falure in the model?

Given how vast the labeled data set is and how unbalanced the amount of spam emails to real emails there were, this has lead KNN to be sensitive when classifying the spam mail. The model and its implemtation to this data set has showed to be valueable in its percision.

1_nBgCTU_hAVG00eYkcRf6Mw.png

References
Academic (if any)
Online (if any)
Mongo DB $regex implementation - https://www.mongodb.com/docs/manual/reference/operator/query/regex/

Credits
If you use and/or adapt your code from existing projects, you must provide links and acknowldge the authors.
This code is based on .... (if any)

Simplilearn -https://www.youtube.com/watch?v=FkF2jhaRJIs Context and implementaion of TfidfVectorizer() and its role in the classifiation of emails was adapted from those of the youtube channel Simplilearn who provided such explanation in thier walk through of a similer classifier project.

Nasir Soft- https://www.youtube.com/watch?v=Bu4-OJXUOXk Aided with the implementaion of KNN to my data set. Mainly clarification which operator output hoses to plug to which operator inputs.
